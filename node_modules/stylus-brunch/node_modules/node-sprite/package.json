{
  "name": "node-sprite",
  "version": "0.1.1",
  "author": {
    "name": "naltatis"
  },
  "keywords": [
    "css",
    "sprite",
    "sprites",
    "stylus",
    "retina",
    "images"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/naltatis/node-sprite.git"
  },
  "dependencies": {
    "coffee-script": "1.3.3",
    "underscore": "1.3.1",
    "imagemagick": "http://github.com/naltatis/node-imagemagick/tarball/master",
    "seq": "0.3.5",
    "watch": "0.5.1"
  },
  "devDependencies": {
    "expresso": "0.9.2",
    "stylus": "0.29.0"
  },
  "scripts": {
    "test": "expresso test/*"
  },
  "main": "./index.js",
  "engines": {
    "node": "> 0.8.x"
  },
  "readme": "# node-sprite\nA CSS Sprite Generation Library with Stylus and Retina Support.\n\n## Requirements\nIt uses **ImageMagick** for its graphics operations. So make sure you have the `convert` and `identify` command available in your envirnoment.\n\n## Usage\n\n`node-sprite` exports three functions: `sprite`, `sprites` and `stylus`. The following examples show how to use them.\n\n### Example Directory Stucture\n\n```\n- app.js\n- images/\n  - global/\n    - bar.jpg     // 200x100px image\n    - foo.png     // 10x50px   image\n  - animals/\n    - cat.gif     // 64x64px   image\n    - duck.png    // 64x64px   image\n    - mouse.gif   // 64x64px   image\n```\n\n## Single Sprite\n\n```javascript\nvar sprite = require('node-sprite');\n\nsprite.sprite('global', {path: './images'}, function(err, globalSprite) {\n  console.log(globalSprite.filename())\n  console.log('foo', globalSprite.image('foo'));\n  console.log('bar', globalSprite.image('bar'));\n});\n```\n\nThis code will generate a sprite image named `./images/global-[checksum].png` and output the following:\n\n    global-45c81.png\n    foo, {width: 200, height: 100, positionX: 0, positionY: 52}\n    bar, {width: 64, height: 64, positionX: 0, positionY: 0}\n\n## Multiple Sprites\n\n```javascript\nvar sprite = require('node-sprite');\n\nsprite.sprites({path: './images'}, function(err, result) {\n  var globalSprite = result['global'];\n  var animalsSprite = result['animals'];\n  console.log(globalSprite.filename());\n  console.log(animalsSprite.filename());\n  console.log('animals/duck', animalsSprite.image('duck'));\n});\n```\n\nThis code will generate a sprite image for every subfolder of `./images`. The images are named `./images/[folder]-[checksum].png`.\n\n    global-45c81.png\n    animals-b775d.png\n    animals/duck, {width: 10, height: 50, positionX: 0, positionY: 66}\n\n## Stylus Integration\n\n```\n// screen.styl\n#duck\n  sprite animal duck\n#mouse\n  sprite global mouse false\n```\n\nThe `sprite` function generates the correct `background` image and position for the specified image. By default it also adds `width` and `height` properties. You can prevent this behaviour by setting the third optional parameter to `false`.\n\n```css\n/* screen.css */\n#duck {\n  background: url('./images/animals-b775d.png') 0px -66px;\n  width: 64px;\n  height: 64px;\n}\n#mouse {\n  background: url('./images/animals-b775d.png') 0px -132px;\n}\n```\n\nThe `sprite.stylus` function behaves similar to `sprite.sprites`, but it returns a helper object, with provides a stylus helper function `helper.fn`.\n\n```javascript\nvar sprite = require('node-sprite');\nvar stylus = require('stylus');\n\nvar str = require(\"fs\").readFileSync(\"screen.styl\")\n\nsprite.stylus({path: './images'}, function (err, helper) {\n  stylus(str)\n    .set('filename', 'screen.styl')\n    .define('sprite', helper.fn)\n    .render(function (err, css) {\n      console.log(css);\n    });\n});\n```\n\n## Retina / High Resolution Sprite Support\n\nnode-sprite has a special mode for high resolution sprites. When your sprite folder ends with `-2x` it will be treated differently.\n\n### Basic Example\n\n    animals-2x/\n    - cat.gif    // 128x128px image\n    - duck.png   // 128x128px image\n\nAlthough we have 128x128px images. The elements should only have the size of 64x64px and the background has to be scaled down.\n\n```\n// screen.styl\n#duck\n  sprite(animal-2x, duck)\n  background-size sprite-dimensions(animal-2x, name)\n```\n\nwill be transformed to\n\n```css\n/* screen.css */\n#duck {\n  background: url('./images/animals-2x-c575d.png') 0px -66px;\n  width: 64px;\n  height: 64px;\n  background-size: 64px 194px;\n}\n```\n\nFor this to work you have to add the `sprite-dimensions` helper in you stylus configuration:\n\n`.define('sprite-dimensions', helper.dimensionsFn)`\n\n### Retina Mixin\n\nIf you want to have a retina and a non-retina sprite it makes sense to create a mixin like this one:\n\n```\n// screen.styl\nretina-sprite(folder, name)\n  sprite(folder, name)\n  hidpi = s(\"(min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx)\");\n  @media hidpi\n    sprite(folder+\"-2x\", name, false)\n    background-size sprite-dimensions(folder+\"-2x\", name)\n\n#duck\n  retina-sprite animals duck\n```\n\nThis will generate the following css code:\n\n```css\n#duck {\n  background: url('./images/animals-b775d.png') 0px -66px;\n  width: 64px;\n  height: 64px;\n}\n@media (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx) {\n  #duck {\n    background: url('./images/animals-2x-c575d.png') 0px -66px;\n    background-size: 64px 194px;\n  }\n}\n```\n\n*Note: All images in the retina folder should have even height and width pixels.*\n\n## Options\n\nAll three functions accept an optional options parameter.\n\n```javascript\n{\n  path: './images',     // sprite directory\n  padding: 2,           // pixels between images\n  httpPath: './images', // used be the stylus helper\n  watch: false,         // auto update sprite in background\n  retina: '-2x'         // postfix for retina sprite folders\n}\n```\n\n## Auto Update on Image Change\n\nIf you pass `watch: true` as an option node-sprite will watch the sprite folders and regenerate the sprite when something changes.\n\nYou can subscribe to the `update` event of the `sprite` or `helper` object to get notified.\n\n```javascript\nvar generateCss = function () {...};\n\nsprite.stylus({watch: true}, function (err, helper) {\n  generateCss();\n  helper.on(\"update\", generateCss);\n});\n```\n\n## Structural Sprite Information / JSON\n\nnode-sprite will put a `./images/[folder].json` next to every generated sprite image. This file contains structural information of the generated sprite. This files can be used by other modules or applications.\n\nThey are also usefull if you running your application on a production machine without ImageMagick. In this case node-sprite will fallback to this data.\n\n```javascript\n{\n  \"name\": \"animals\",\n  \"checksum\": \"b775d6fa89ad809d7700c32b491c50f0\",\n  \"shortsum\": \"b775d\",\n  \"images\": [\n    {\n      \"name\": \"cat\",\n      \"filename\": \"cat.gif\",\n      \"checksum\": \"25ce6895f8ed03aa127123430997bbdf\",\n      \"width\": 64,\n      \"height\": 64,\n      \"positionX\": 0,\n      \"positionY\": 0\n    },\n    ...\n  ]\n}\n```\n\n## License\nThe MIT License",
  "readmeFilename": "README.md",
  "_id": "node-sprite@0.1.1",
  "description": "A CSS Sprite Generation Library with Stylus and Retina Support.",
  "_from": "node-sprite@0.1.1"
}
